


ARM Macro Assembler    Page 1 


    1 00000000         ;/*********************** (C) COPYRIGHT 2010 Libraworks 
                       *************************
    2 00000000         ;* File Name : os_cpu_a.asm 
    3 00000000         ;* Author  : Librae 
    4 00000000         ;* Version  : V1.0
    5 00000000         ;* Date   : 06/10/2010
    6 00000000         ;* Description : ¶ÃCOS-II asm port for STM32
    7 00000000         ;*******************************************************
                       ************************/
    8 00000000         
    9 00000000                 IMPORT           OSRunning   ; External referenc
                                                            es
   10 00000000                 IMPORT           OSPrioCur
   11 00000000                 IMPORT           OSPrioHighRdy
   12 00000000                 IMPORT           OSTCBCur
   13 00000000                 IMPORT           OSTCBHighRdy
   14 00000000                 IMPORT           OSIntNesting
   15 00000000                 IMPORT           OSIntExit
   16 00000000         ;        IMPORT  OSTaskSwHook
   17 00000000         
   18 00000000                 EXPORT           OSStartHighRdy
   19 00000000                 EXPORT           OSCtxSw
   20 00000000                 EXPORT           OSIntCtxSw
   21 00000000                 EXPORT           OS_CPU_SR_Save ; Functions decl
                                                            ared in this file
   22 00000000                 EXPORT           OS_CPU_SR_Restore
   23 00000000                 EXPORT           PendSV_Handler
   24 00000000                 EXPORT           GetZeroNum
   25 00000000                 EXPORT           GetRBIT16
   26 00000000         
   27 00000000         
   28 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; ÷–∂œøÿ÷∆ºƒ¥Ê∆˜
   29 00000000 E000ED20 
                       NVIC_SYSPRI2
                               EQU              0xE000ED20  ; œµÕ≥”≈œ»º∂ºƒ¥Ê∆˜(
                                                            2)
   30 00000000 FFFF0000 
                       NVIC_PENDSV_PRI
                               EQU              0xFFFF0000  ; PendSV÷–∂œ∫ÕœµÕ≥Ω
                                                            ⁄≈ƒ÷–∂œ
   31 00000000         ; (∂ºŒ™◊ÓµÕ£¨0xff).
   32 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; ¥•∑¢»Ìº˛÷–∂œµƒ÷µ.
                                                            
   33 00000000         
   34 00000000         
   35 00000000                 PRESERVE8
   36 00000000         
   37 00000000                 AREA             |.text|, CODE, READONLY
   38 00000000                 THUMB
   39 00000000         
   40 00000000         
   41 00000000         
   42 00000000         ;*******************************************************
                       *************************************************
   43 00000000         ;                                   CRITICAL SECTION MET



ARM Macro Assembler    Page 2 


                       HOD 3 FUNCTIONS
   44 00000000         ;
   45 00000000         ; Description: Disable/Enable interrupts by preserving t
                       he state of interrupts.  Generally speaking you
   46 00000000         ;              would store the state of the interrupt di
                       sable flag in the local variable 'cpu_sr' and then
   47 00000000         ;              disable interrupts.  'cpu_sr' is allocate
                       d in all of uC/OS-II's functions that need to
   48 00000000         ;              disable interrupts.  You would restore th
                       e interrupt disable state by copying back 'cpu_sr'
   49 00000000         ;              into the CPU's status register.
   50 00000000         ;
   51 00000000         ; Prototypes :     OS_CPU_SR  OS_CPU_SR_Save(void);
   52 00000000         ;                  void       OS_CPU_SR_Restore(OS_CPU_S
                       R cpu_sr);
   53 00000000         ;
   54 00000000         ;
   55 00000000         ; Note(s)    : 1) These functions are used in general li
                       ke this:
   56 00000000         ;
   57 00000000         ;                 void Task (void *p_arg)
   58 00000000         ;                 {
   59 00000000         ;                 #if OS_CRITICAL_METHOD == 3          /
                       * Allocate storage for CPU status register */
   60 00000000         ;                     OS_CPU_SR  cpu_sr;
   61 00000000         ;                 #endif
   62 00000000         ;
   63 00000000         ;                          :
   64 00000000         ;                          :
   65 00000000         ;                     OS_ENTER_CRITICAL();             /
                       * cpu_sr = OS_CPU_SaveSR();                */
   66 00000000         ;                          :
   67 00000000         ;                          :
   68 00000000         ;                     OS_EXIT_CRITICAL();              /
                       * OS_CPU_RestoreSR(cpu_sr);                */
   69 00000000         ;                          :
   70 00000000         ;                          :
   71 00000000         ;                 }
   72 00000000         ;*******************************************************
                       *************************************************
   73 00000000         
   74 00000000         OS_CPU_SR_Save
   75 00000000 F3EF 8010       MRS              R0, PRIMASK ;∂¡»°PRIMASKµΩR0,R0
                                                            Œ™∑µªÿ÷µ 
   76 00000004 B672            CPSID            I           ;PRIMASK=1,πÿ÷–∂œ(N
                                                            MI∫Õ”≤º˛FAULTø…“‘œÏ
                                                            ”¶)
   77 00000006 4770            BX               LR          ;∑µªÿ
   78 00000008         
   79 00000008         OS_CPU_SR_Restore
   80 00000008 F380 8810       MSR              PRIMASK, R0 ;∂¡»°R0µΩPRIMASK÷–,
                                                            R0Œ™≤Œ ˝,ª÷∏¥µΩ÷Æ«∞
                                                            µƒ÷–∂œ‘ –Ì◊¥Ã¨£¨
   81 0000000C 4770            BX               LR          ;∑µªÿ
   82 0000000E         
   83 0000000E         
   84 0000000E         ;/******************************************************
                       ********************************
   85 0000000E         ;* ∫Ø ˝√˚≥∆: OSStartHighRdy



ARM Macro Assembler    Page 3 


   86 0000000E         ;*
   87 0000000E         ;* π¶ƒ‹√Ë ˆ:  π”√µ˜∂»∆˜‘À––µ⁄“ª∏ˆ»ŒŒÒ
   88 0000000E         ;* 
   89 0000000E         ;* ≤Œ     ˝: None
   90 0000000E         ;*
   91 0000000E         ;* ∑µ ªÿ ÷µ: None
   92 0000000E         ;*******************************************************
                       *******************************/  
   93 0000000E         
   94 0000000E         OSStartHighRdy
   95 0000000E 4C22            LDR              R4, =NVIC_SYSPRI2 ; set the Pen
                                                            dSV exception prior
                                                            ity
   96 00000010 4D22            LDR              R5, =NVIC_PENDSV_PRI ;’‚¿Ô…Ë÷√»
                                                            ŒŒÒ«–ªª÷–∂œ”≈œ»º∂Œ™
                                                            ◊ÓµÕ
   97 00000012 6025            STR              R5, [R4]
   98 00000014         
   99 00000014 F04F 0400       MOV              R4, #0      ; set the PSP to 0 
                                                            for initial context
                                                             switch call
  100 00000018 F384 8809       MSR              PSP, R4
  101 0000001C         
  102 0000001C 4C20            LDR              R4, =OSRunning ; OSRunning = TR
                                                            UE,”–°Æ=°ØªÒ»°±‰¡øµ
                                                            ÿ÷∑£¨√ª”–°Æ=°Ø£¨ªÒ»
                                                            °±‰¡ø÷µ£¨œ‡µ±”⁄R4=&
                                                            OSRuning
  103 0000001E F04F 0501       MOV              R5, #1      ;z‘⁄’‚¿Ô…Ë÷√»ŒŒÒµ˜∂
                                                            »ø™ º‘À––
  104 00000022 7025            STRB             R5, [R4]    ;œ‡µ±”⁄*R4=R5
  105 00000024         
  106 00000024         ;«–ªªµΩ◊Ó∏ﬂ”≈œ»º∂µƒ»ŒŒÒ
  107 00000024 4C1F            LDR              R4, =NVIC_INT_CTRL ;rigger the 
                                                            PendSV exception (c
                                                            auses context switc
                                                            h)
  108 00000026 F04F 5580       LDR              R5, =NVIC_PENDSVSET
  109 0000002A 6025            STR              R5, [R4]    ;//¥•∑¢»ŒŒÒµ˜∂»÷–∂œ
                                                            
  110 0000002C         
  111 0000002C B662            CPSIE            I           ;enable interrupts 
                                                            at processor level
  112 0000002E         OSStartHang
  113 0000002E E7FE            B                OSStartHang ;should never get h
                                                            ere£¨µ•≤Ωµ˜ ‘ª·Ω¯»Î
                                                            ’‚¿Ô
  114 00000030         
  115 00000030         ;/******************************************************
                       ********************************
  116 00000030         ;* ∫Ø ˝√˚≥∆: OSCtxSw
  117 00000030         ;*
  118 00000030         ;* π¶ƒ‹√Ë ˆ: »ŒŒÒº∂…œœ¬Œƒ«–ªª         
  119 00000030         ;*
  120 00000030         ;* ≤Œ     ˝: None
  121 00000030         ;*
  122 00000030         ;* ∑µ ªÿ ÷µ: None
  123 00000030         ;*******************************************************
                       ********************************/



ARM Macro Assembler    Page 4 


  124 00000030         
  125 00000030         OSCtxSw
  126 00000030 B430            PUSH             {R4, R5}
  127 00000032 4C1C            LDR              R4, =NVIC_INT_CTRL ;¥•∑¢PendSV“
                                                            Ï≥£ (causes context
                                                             switch)
  128 00000034 F04F 5580       LDR              R5, =NVIC_PENDSVSET
  129 00000038 6025            STR              R5, [R4]
  130 0000003A BC30            POP              {R4, R5}
  131 0000003C 4770            BX               LR
  132 0000003E         
  133 0000003E         ;/******************************************************
                       ********************************
  134 0000003E         ;* ∫Ø ˝√˚≥∆: OSIntCtxSw
  135 0000003E         ;*
  136 0000003E         ;* π¶ƒ‹√Ë ˆ: ÷–∂œº∂»ŒŒÒ«–ªª
  137 0000003E         ;*
  138 0000003E         ;* ≤Œ     ˝: None
  139 0000003E         ;*
  140 0000003E         ;* ∑µ ªÿ ÷µ: None
  141 0000003E         ;*******************************************************
                       ********************************/
  142 0000003E         
  143 0000003E         OSIntCtxSw
  144 0000003E B430            PUSH             {R4, R5}
  145 00000040 4C18            LDR              R4, =NVIC_INT_CTRL ;¥•∑¢PendSV“
                                                            Ï≥£ (causes context
                                                             switch)
  146 00000042 F04F 5580       LDR              R5, =NVIC_PENDSVSET
  147 00000046 6025            STR              R5, [R4]
  148 00000048 BC30            POP              {R4, R5}
  149 0000004A 4770            BX               LR
  150 0000004C BF00            NOP
  151 0000004E         
  152 0000004E         ;/******************************************************
                       ********************************
  153 0000004E         ;* ∫Ø ˝√˚≥∆: OSPendSV
  154 0000004E         ;*
  155 0000004E         ;* π¶ƒ‹√Ë ˆ: OSPendSV is used to cause a context switch.
                       
  156 0000004E         ;*
  157 0000004E         ;* ≤Œ     ˝: None
  158 0000004E         ;*
  159 0000004E         ;* ∑µ ªÿ ÷µ: None
  160 0000004E         ;*******************************************************
                       ********************************/
  161 0000004E         
  162 0000004E         PendSV_Handler                       ;»ŒŒÒ«–ªª÷–∂œ
  163 0000004E B672            CPSID            I           ; Prevent interrupt
                                                            ion during context 
                                                            switch
  164 00000050 F3EF 8009       MRS              R0, PSP     ; PSP is process st
                                                            ack pointer »Áπ˚‘⁄”
                                                            √PSP∂—’ª,‘Úø…“‘∫ˆ¬‘
                                                            ±£¥Êºƒ¥Ê∆˜,≤ŒøºCM3»
                                                            ®Õ˛÷–µƒÀ´∂—’ª-∞◊≤À◊
                                                            ¢
  165 00000054 B128            CBZ              R0, PendSV_Handler_Nosave ; Ski
                                                            p register save the



ARM Macro Assembler    Page 5 


                                                             first time£¨»Áπ˚PS
                                                            PŒ™0£¨Ã¯◊™
  166 00000056         
  167 00000056 3820            SUBS             R0, R0, #0x20 ; Save remaining 
                                                            regs r4-11 on proce
                                                            ss stack
  168 00000058 E880 0FF0       STM              R0, {R4-R11} ;ºı“ª∏ˆ◊÷÷Æ∫Û£¨ ÷∂
                                                            Ø±£¥ÊR4-R11£¨∆‰”‡ºƒ
                                                            ¥Ê∆˜“—◊‘∂Ø±£¥Ê
  169 0000005C         
  170 0000005C 4912            LDR              R1, =OSTCBCur ; OSTCBCur->OSTCB
                                                            StkPtr = SP;
  171 0000005E 6809            LDR              R1, [R1]    ;//±£¥Ê–¬∂—’ªµÿ÷∑£¨
                                                            »ŒŒÒ±ª«–ªª
  172 00000060 6008            STR              R0, [R1]    ; R0 is SP of proce
                                                            ss being switched o
                                                            ut
  173 00000062         
  174 00000062         ; At this point, entire context of process has been save
                       d
  175 00000062         PendSV_Handler_Nosave
  176 00000062         ;    PUSH    {R14}                                      
                                ; Save LR exc_return value
  177 00000062         ;   LDR     R0, =OSTaskSwHook                           
                               ; OSTaskSwHook();
  178 00000062         ;   BLX     R0
  179 00000062         ;   POP     {R14}     //√ª”√µΩ—Ω£¨£¨
  180 00000062         
  181 00000062 4812            LDR              R0, =OSPrioCur ; OSPrioCur = OS
                                                            PrioHighRdy;
  182 00000064 4912            LDR              R1, =OSPrioHighRdy
  183 00000066 780A            LDRB             R2, [R1]
  184 00000068 7002            STRB             R2, [R0]
  185 0000006A         
  186 0000006A 480F            LDR              R0, =OSTCBCur ; OSTCBCur  = OST
                                                            CBHighRdy;
  187 0000006C 4911            LDR              R1, =OSTCBHighRdy
  188 0000006E 680A            LDR              R2, [R1]
  189 00000070 6002            STR              R2, [R0]
  190 00000072         
  191 00000072 6810            LDR              R0, [R2]    ; R0 is new process
                                                             SP; SP = OSTCBHigh
                                                            Rdy->OSTCBStkPtr;
  192 00000074 E890 0FF0       LDM              R0, {R4-R11} ; Restore r4-11 fr
                                                            om new process stac
                                                            k
  193 00000078 3020            ADDS             R0, R0, #0x20
  194 0000007A F380 8809       MSR              PSP, R0     ; Load PSP with new
                                                             process SP
  195 0000007E F04E 0E04       ORR              LR, LR, #0x04 ; Ensure exceptio
                                                            n return uses proce
                                                            ss stack  «–ªªŒ™»ŒŒ
                                                            Òº∂
  196 00000082 B662            CPSIE            I
  197 00000084 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context
  198 00000086         
  199 00000086         



ARM Macro Assembler    Page 6 


  200 00000086         
  201 00000086         ;º∆À„«∞µº¡„£¨»ŒŒÒµ˜∂» ± π”√
  202 00000086         GetZeroNum                           ;º∆À„«∞µº¡„
  203 00000086 FAB0 F080       CLZ              R0, R0      ;R0 «»ŒŒÒæÕ–˜±Ì
  204 0000008A 4770            BX               LR
  205 0000008C         
  206 0000008C         ;À´◊÷Ω⁄µƒ∞¥Œª∑¥◊™
  207 0000008C         GetRBIT16
  208 0000008C FA90 F0A0       RBIT             R0, R0
  209 00000090 EA4F 4010       LSR              R0, R0,#16
  210 00000094 4770            BX               LR
  211 00000096         
  212 00000096                 end
              00 00 E000ED20 
              FFFF0000 
              00000000 
              E000ED04 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=..\obj\os_cpu_a.d -o..\obj\os_cpu_a.o -IF:\¥®~\GitHub\WK_JZQ_V2.5\
USER\RTE -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\Kei
l_v5\ARM\CMSIS\Include --predefine="__UVISION_VERSION SETA 514" --predefine="ST
M32F10X_MD SETA 1" --list=.\os_cpu_a.lst ..\UCOSII\PORT\os_cpu_a.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 37 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      None
Comment: .text unused
GetRBIT16 0000008C

Symbol: GetRBIT16
   Definitions
      At line 207 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 25 in file ..\UCOSII\PORT\os_cpu_a.asm
Comment: GetRBIT16 used once
GetZeroNum 00000086

Symbol: GetZeroNum
   Definitions
      At line 202 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 24 in file ..\UCOSII\PORT\os_cpu_a.asm
Comment: GetZeroNum used once
OSCtxSw 00000030

Symbol: OSCtxSw
   Definitions
      At line 125 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 19 in file ..\UCOSII\PORT\os_cpu_a.asm
Comment: OSCtxSw used once
OSIntCtxSw 0000003E

Symbol: OSIntCtxSw
   Definitions
      At line 143 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 20 in file ..\UCOSII\PORT\os_cpu_a.asm
Comment: OSIntCtxSw used once
OSStartHang 0000002E

Symbol: OSStartHang
   Definitions
      At line 112 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 113 in file ..\UCOSII\PORT\os_cpu_a.asm
Comment: OSStartHang used once
OSStartHighRdy 0000000E

Symbol: OSStartHighRdy
   Definitions
      At line 94 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 18 in file ..\UCOSII\PORT\os_cpu_a.asm
Comment: OSStartHighRdy used once
OS_CPU_SR_Restore 00000008

Symbol: OS_CPU_SR_Restore



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 79 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 22 in file ..\UCOSII\PORT\os_cpu_a.asm
Comment: OS_CPU_SR_Restore used once
OS_CPU_SR_Save 00000000

Symbol: OS_CPU_SR_Save
   Definitions
      At line 74 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 21 in file ..\UCOSII\PORT\os_cpu_a.asm
Comment: OS_CPU_SR_Save used once
PendSV_Handler 0000004E

Symbol: PendSV_Handler
   Definitions
      At line 162 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 23 in file ..\UCOSII\PORT\os_cpu_a.asm
Comment: PendSV_Handler used once
PendSV_Handler_Nosave 00000062

Symbol: PendSV_Handler_Nosave
   Definitions
      At line 175 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 165 in file ..\UCOSII\PORT\os_cpu_a.asm
Comment: PendSV_Handler_Nosave used once
11 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 28 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 107 in file ..\UCOSII\PORT\os_cpu_a.asm
      At line 127 in file ..\UCOSII\PORT\os_cpu_a.asm
      At line 145 in file ..\UCOSII\PORT\os_cpu_a.asm

NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 32 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 108 in file ..\UCOSII\PORT\os_cpu_a.asm
      At line 128 in file ..\UCOSII\PORT\os_cpu_a.asm
      At line 146 in file ..\UCOSII\PORT\os_cpu_a.asm

NVIC_PENDSV_PRI FFFF0000

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 30 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 96 in file ..\UCOSII\PORT\os_cpu_a.asm
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI2 E000ED20

Symbol: NVIC_SYSPRI2
   Definitions
      At line 29 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 95 in file ..\UCOSII\PORT\os_cpu_a.asm
Comment: NVIC_SYSPRI2 used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OSIntExit 00000000

Symbol: OSIntExit
   Definitions
      At line 15 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      None
Comment: OSIntExit unused
OSIntNesting 00000000

Symbol: OSIntNesting
   Definitions
      At line 14 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      None
Comment: OSIntNesting unused
OSPrioCur 00000000

Symbol: OSPrioCur
   Definitions
      At line 10 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 181 in file ..\UCOSII\PORT\os_cpu_a.asm
Comment: OSPrioCur used once
OSPrioHighRdy 00000000

Symbol: OSPrioHighRdy
   Definitions
      At line 11 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 182 in file ..\UCOSII\PORT\os_cpu_a.asm
Comment: OSPrioHighRdy used once
OSRunning 00000000

Symbol: OSRunning
   Definitions
      At line 9 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 102 in file ..\UCOSII\PORT\os_cpu_a.asm
Comment: OSRunning used once
OSTCBCur 00000000

Symbol: OSTCBCur
   Definitions
      At line 12 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 170 in file ..\UCOSII\PORT\os_cpu_a.asm
      At line 186 in file ..\UCOSII\PORT\os_cpu_a.asm

OSTCBHighRdy 00000000

Symbol: OSTCBHighRdy
   Definitions
      At line 13 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 187 in file ..\UCOSII\PORT\os_cpu_a.asm
Comment: OSTCBHighRdy used once
7 symbols
356 symbols in table
